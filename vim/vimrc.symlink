"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Maintainer:
"      America Calleros
"
" Awesome_version:
"       Get this config, nice color schemes and lots of plugins!
"
"       Installed the initial version from:
"           https://github.com/amix/vimrc
"
"       Inspired by:
"          https://github.com/jelera/vimconfig/blob/master/vimrc
"
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable

"----------------------------------------------------------------------------//
" Plugins                                                                  {{{
"----------------------------------------------------------------------------//

call plug#begin()
"------------------+
" Filetype       {{{
"------------------+
	" JavaScript, JSON, ES6, JSX -------------{{{
	Plug 'leafgarland/typescript-vim' " TypeScript syntax
	Plug 'maxmellon/vim-jsx-pretty'   " JS and JSX syntax
	Plug 'jparise/vim-graphql'        " GraphQL syntax
	"}}}

	" HTML/XML/CSS -----------{{{
	Plug 'mattn/emmet-vim'
		let g:user_emmet_leader_key='<C-E>'
	Plug 'othree/html5.vim'
	"}}}


	" Ruby -------------------{{{
 " Plug 'bbatsov/rubocop'
  Plug 'ngmy/vim-rubocop'
    let g:vimrubocop_config = './.rubocop.yml'
	Plug 'slim-template/vim-slim'
	Plug 'vim-ruby/vim-ruby'

  " Surround strings
  Plug 'tpope/vim-surround'
	Plug 'tpope/vim-rake'
	Plug 'tpope/vim-bundler'
	Plug 'tpope/vim-rails'
	Plug 'tpope/vim-cucumber'
	Plug 'tpope/vim-endwise' "{{{
		" Wisely add 'end' or (equivalent) in Ruby, Shell Scripting, Elixir, Lua,
		" Haskell, etc.

		" disable mapping to not break coc.nvim
		let g:endwise_no_mappings = 1
		"}}}
	"}}}

	" Markdown ---------------{{{
	Plug 'tpope/vim-markdown'
	Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }
	"}}}

  " to snake_case: :crs
  " to camelCase: :crc
  " to UPPER_CASE: :cru
  " to MixedCase: :crm
  " to dot.case: :cr.
  " to space case: :cr<space>
  " to Title Case: :crt
	Plug 'tpope/vim-abolish'
	" Python ---------------{{{
	Plug 'vim-python/python-syntax'
		let g:python_highlight_all = 1
	"}}}
""}}}

  "Elixir
  Plug 'elixir-editors/vim-elixir'

  " Linting
  Plug 'dense-analysis/ale'
    let g:ale_fixers = {
\   'javascript': ['prettier'],
\   'css': ['prettier'],
\   'ruby': ['rubocop'],
\}
    let g:ale_fix_on_save = 1

  "Git
  Plug 'tpope/vim-fugitive'

  " Toolbar
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'

  " Whitespace
  Plug 'ntpeters/vim-better-whitespace'
  let g:strip_whitespace_on_save = 1
  let g:strip_whitespace_confirm=0
  "Multi-Cursor
  Plug 'mg979/vim-visual-multi', {'branch': 'master'}
  " Multicursor mappings
  let g:VM_maps = {}
  let g:VM_maps['Find Under']         = '<C-d>'           " replace C-n
  let g:VM_maps['Find Subword Under'] = '<C-d>'           " replace visual C-n
  " Navigation and file search
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } "{{{
  	" Interactive fuzzy finder
  	Plug 'junegunn/fzf.vim'
  	nnoremap <silent> <C-P> :GFiles<Enter>
  	nnoremap <silent> <C-B>b :Buffers<Enter>
  	nnoremap <silent> <C-B>h :History<Enter>
  	nnoremap <silent> <Leader>ag :Rg <C-R><C-W><CR>
  	" Ripgrep support with FZF
  	nnoremap <silent> \ :Rg<CR>

  	 let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }
  	 let g:fzf_layout = { 'down' : '~40%' }

  	" CTRL-A CTRL-Q to select all and build quickfix list

  	function! s:build_quickfix_list(lines)
  		call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  		copen
  		cc
  	endfunction

  	let g:fzf_action = {
  				\ 'ctrl-q': function('s:build_quickfix_list'),
  				\ 'ctrl-t': 'tab split',
  				\ 'ctrl-x': 'split',
  				\ 'ctrl-v': 'vsplit' }

  	let $FZF_DEFAULT_OPTS = '--bind ctrl-a:select-all'
  	"
  "}}}

  " Silver search to use with fzf
  if executable('ag')
    " Note we extract the column as well as the file and line number
    set grepprg=ag\ --nogroup\ --nocolor\ --column
    set grepformat=%f:%l:%c%m
  endif

  Plug 'preservim/nerdtree' "{{{
  	" Tree file system explorer for Vim

  	augroup NerdTree
  		" autocmd BufWinEnter * NERDTreeFind
  		autocmd StdinReadPre * let s:std_in=1
  		autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
  	augroup END

  	nnoremap <c-t> :NERDTreeToggle<Enter>
  	nnoremap <silent> <C-B>t :NERDTreeFind<Enter>
  	let NERDTreeQuitOnOpen = 1
  	let NERDTreeMinimalUI = 1
  	let NERDTreeDirArrows = 1
  "}}}
  "
  "Color scheme
  Plug 'lifepillar/vim-gruvbox8'
  Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }

call plug#end()

" Tell the language client to use the default IP and port
" that Solargraph runs on
set hidden
let g:LanguageClient_serverCommands = {
    \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
    \ 'javascript': ['/usr/local/bin/javascript-typescript-stdio'],
    \ 'javascript.jsx': ['tcp://127.0.0.1:2089'],
    \ 'python': ['/usr/local/bin/pyls'],
    \ 'ruby': ['~/.rbenv/shims/solargraph', 'stdio', 'tcp://localhost:7658'],
    \ }

" note that if you are using Plug mapping you should not use `noremap` mappings.
nmap <F5> <Plug>(lcn-menu)
" Or map each action separately
nmap <silent>K <Plug>(lcn-hover)
nmap <silent> gd <Plug>(lcn-definition)
nmap <silent> <F2> <Plug>(lcn-rename)
"let g:LanguageClient_serverCommands = {
"    \ 'ruby': ['tcp://localhost:7658']
"    \ }

" Don't send a stop signal to the server when exiting vim.
" This is optional, but I don't like having to restart Solargraph
" every time I restart vim.
let g:LanguageClient_autoStop = 0

" Configure ruby omni-completion to use the language client:
autocmd FileType ruby setlocal omnifunc=LanguageClient#complete

"----------------------------------------------------------------------------//
" BASIC CONFIGURATION                                                       {{{
"------------------------------------+---------------------------------------//
" General Options                  {{{
"------------------------------------+
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sets how many lines of history VIM has to remember
set history=500

" Enable filetype plugins
filetype plugin on
filetype indent on
set smartindent

" Set to auto read when a file is changed from the outside
set autoread
au FocusGained,BufEnter * checktime

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","

" Fast saving
nmap <leader>w :w!<cr>

" Open files search
nmap <leader>ff :Files<cr>

" Run Git commands
nmap <leader>g :Git

" :W sudo saves the file
" (useful for handling the permission-denied error)
command! W execute 'w !sudo tee % > /dev/null' <bar> edit!


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"----------------------------------------------------------------
"---------------------------------------------------------------
"
" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Avoid garbled characters in Chinese language windows OS
let $LANG='en'
set langmenu=en
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

" Turn on the Wild menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif


" Clear highlighting on escape in normal mode
nnoremap <esc> :noh<return><esc>
nnoremap <esc>^[ <esc>^[

" Always show current position
set ruler

" Height of the command bar
set cmdheight=1

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Set numbers
set number

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch

" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set visualbell
set t_vb=
set tm=500

" Properly disable sound on errors on MacVim
if has("gui_macvim")
    autocmd GUIEnter * set vb t_vb=
endif

" Add a bit extra margin to the left
"set foldcolumn=1
"----------------------------------------------------------------------------//
" USER INTERFACE                                                            {{{
"------------------------------------+---------------------------------------//
" Look and Feel settings           {{{
"------------------------------------+
set termguicolors

" let g:gruvbox_contrast_dark = 'hard'
 colorscheme gruvbox8_hard
" colorscheme iceberg

set background=dark

if has('gui_running')
	" GVIM / MacVim"{{{
	set guioptions-=T
	set guioptions+=c
	" Font Selection
	if has('mac')
		" For MacVim
		set guifont=CaskaydiaCove\ Nerd\ Font\ Mono:h15
	else
		" For Linux gVim
		set guifont=Fira\ Code\ 12
	endif
	"}}}
else
	" Terminal Vim"{{{
	set t_Co=256
	"}}}
endif

hi  gitcommitFirstLine ctermfg=81
hi  gitcommitSummary ctermfg=81
hi  RubyKeywordAsMethod ctermfg=44
 set cursorline
" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git etc. anyway...
set nobackup
set nowb
set noswapfile


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines


""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
map <C-space> ?

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Git blame shortcut
map <leader>b :Git blame<cr>

" Close the current buffer
map <leader>bd :Bclose<cr>:tabclose<cr>gT

" Close all the buffers
map <leader>ba :bufdo bd<cr>

map <leader>l :bnext<cr>
map <leader>h :bprevious<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <leader>t<leader> :tabnext

" Let 'tl' toggle between this and the last accessed tab
let g:lasttab = 1
nmap <Leader>tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()


" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <C-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif


""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" Format the status line
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l\ \ Column:\ %c


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Strip trailing whitespace
nnoremap <leader>nw :%s/\s\+$//e<cr>:let @/=''<CR>

" Move a line of text using Ctrl+[jk] on mac
"vnoremap <C-k> :m '<-2<CR>gv=gv
"vnoremap <C-j> :m '>+1<CR>gv=gv
"nnoremap <C-k> :m .-2<CR>==
"nnoremap <C-j> :m .+1<CR>==

"This is to make shift + [jk] move a line up or down
"nnoremap K :m .-2<CR>==
"nnoremap J :m .+1<CR>==
"vnoremap K :m '<-2<CR>gv=gv
"vnoremap J :m '>+1<CR>gv=gv

" Delete trailing white space on save, useful for some filetypes ;)

fun! CleanExtraSpaces()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    silent! %s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfun

if has("autocmd")
    autocmd BufWritePre *.txt,*.js,*.py,*.wiki,*.sh,*.coffee :call CleanExtraSpaces()
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Quickly open a buffer for scribble
map <leader>q :e ~/buffer<cr>

" Quickly open a markdown buffer for scribble
map <leader>x :e ~/buffer.md<cr>

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    endif
    return ''
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
    let l:currentBufNum = bufnr("%")
    let l:alternateBufNum = bufnr("#")

    if buflisted(l:alternateBufNum)
        buffer #
    else
        bnext
    endif

    if bufnr("%") == l:currentBufNum
        new
    endif

    if buflisted(l:currentBufNum)
        execute("bdelete! ".l:currentBufNum)
    endif
endfunction

function! CmdLine(str)
    call feedkeys(":" . a:str)
endfunction

function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", "\\/.*'$^~[]")
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'gv'
        call CmdLine("Ack '" . l:pattern . "' " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction
